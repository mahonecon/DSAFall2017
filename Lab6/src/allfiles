
public class Deq<T> extends Queue<T> implements ExtendedQueueInterface<T> {

    public void enqueueFirst(T newItem) throws ExtendedQueueException {
        if (size == queue.length) {
            resize();
        }
        if (front == 0) {
            front = queue.length - 1;
        } else {
            front = front - 1;
        }
        queue[front] = newItem;
        size++;

    }//end enqueueFirst

    public T dequeueLast() throws ExtendedQueueException {
        if (size == 0) {
            throw new ExtendedQueueException("Nothing to Dequeue!");
        }

        if (back == 0) {
            back = queue.length - 1;
        } else {
            back--;
        }

        T t = queue[back];
        size--;
        return t;
    }//end dequeueLast

    public T peekLast() throws ExtendedQueueException {
        if (size == 0) {
            throw new ExtendedQueueException("Nothing to Peek!");
        }

        if (back == 0) {
            return queue[queue.length - 1];
        } else {
            return queue[back];
        }
    }//end peekLast

}
::::::::::::::
Queue.java
::::::::::::::

public class Queue<T> implements QueueInterface<T> {

    protected T[] queue;
    protected int front;
    protected int back;
    protected int size;

    public Queue() {
        queue = (T[]) new Object[3];
        back = 0;
        front = 0;
        size = 0;
    }//end default constructor

    public boolean isEmpty() {
        return size == 0;
    }//end isEmpty

    public void enqueue(T newItem) throws QueueException {
        if (size == queue.length) {
            resize();
        }
        queue[back] = newItem;
        back = (back + 1) % queue.length;
        size++;

    }//end enqueue

    public T dequeue() throws QueueException {
        if (size == 0) {
            throw new QueueException("Nothing to dequeue!");
        }

        T t = queue[front];
        queue[front] = null;
        size--;
        front = (front + 1) % queue.length;

        return t;
    }//end dequeue

    public T peek() throws QueueException {
        if (size == 0) {
            throw new QueueException("Nothing to peek!");
        }
        return queue[front];
    }//end peek

    public void dequeueAll() {
        queue = (T[]) new Object[3];
        size = 0;
        front = 0;
        back = 0;
    }//end dequeueAll

    protected void resize() {
        T[] temp = (T[]) new Object[(int) Math.round(size * 1.5)];
        for (int i = 0; i < size; i++) {
            temp[i] = queue[(i + front) % queue.length];
        }
        front = 0;
        back = size;
        queue = temp;
    }//end resize

    public String toString() {
        String s = "";
        if (!isEmpty()) {
            for (int i = 0; i < size; i++) {
                s += queue[(i + front) % queue.length] + ", ";
            }
            s = s.substring(0, s.length() - 2);
        }
        return s;
    } //end toString
}
::::::::::::::
StringReader.java
::::::::::::::

import java.io.*;

public class StringReader {

    public static BufferedReader stdin = new BufferedReader(new InputStreamReader(System.in));
    public static ListArrayBased<Character> q = new ListArrayBasedPlus<Character>();
    public static String firstHalf = "";
    public static String secondHalf = "";

    public static void main(String[] args) throws IOException {

        System.out.println("*****************************************************************************");

        char code = 0;
        int pos = 0;
        int minusPos = 0;
        boolean minus = false;
        while (code != '.') {
            System.out.print("Enter Character: ");
            code = (char) stdin.read();
            System.out.print(code + "\n");
            if (code != '\n') {
                q.add(pos, code);
                pos++;
            }
            if (code == '-') {
                minusPos = pos;
                minus = true;
            }//end if
        }//end while
        if (minus) {

            for (int i = 0; i < minusPos - 1; i++) {
                firstHalf += q.get(i);
            }//end for

            for (int i = (minusPos); i < q.size() - 1; i++) {
                secondHalf += q.get(i);
            }//end for

            if ((firstHalf.length() > secondHalf.length()) && firstHalf.length() != 0) {
                System.out.println("Left Longer<<");
            } else if ((secondHalf.length() > firstHalf.length()) && secondHalf.length() != 0) {
                System.out.println("\t >>Right Longer");
            } else if (secondHalf.length() == firstHalf.length()) {
                if (!secondHalf.equalsIgnoreCase(firstHalf)) {
                    System.out.println("Same Length, Different Content");
                } else {
                    System.out.print("Same Length and Same content, ");
                    if (isPalindrome(secondHalf.toUpperCase())) {
                        System.out.print("Palindrome \n");
                    } else {
                        System.out.print("No Palindrome \n");
                    }
                }
            }
        } else {
            System.out.println("No Minus");
        }

    }//end main

    public static boolean isPalindrome(String s) {
        int size = s.length();

        if (s.length() == 0) {
            return false;
        }

        for (int i = 0; i < (size / 2); i++) {
            if (s.charAt(i) != s.charAt(size - i - 1)) {
                return false;
            }
        }
        return true;
    }
}
